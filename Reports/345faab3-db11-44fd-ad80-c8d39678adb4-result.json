{"name": "test_login[chrome-standard_user-secret_sauce]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@id='user-name']\"}\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00C36643]\n\t(No symbol) [0x00BCBE21]\n\t(No symbol) [0x00ACDA9D]\n\t(No symbol) [0x00B01342]\n\t(No symbol) [0x00B0147B]\n\t(No symbol) [0x00B38DC2]\n\t(No symbol) [0x00B1FDC4]\n\t(No symbol) [0x00B36B09]\n\t(No symbol) [0x00B1FB76]\n\t(No symbol) [0x00AF49C1]\n\t(No symbol) [0x00AF5E5D]\n\tGetHandleVerifier [0x00EAA142+2497106]\n\tGetHandleVerifier [0x00ED85D3+2686691]\n\tGetHandleVerifier [0x00EDBB9C+2700460]\n\tGetHandleVerifier [0x00CE3B10+635936]\n\t(No symbol) [0x00BD4A1F]\n\t(No symbol) [0x00BDA418]\n\t(No symbol) [0x00BDA505]\n\t(No symbol) [0x00BE508B]\n\tBaseThreadInitThunk [0x76636739+25]\n\tRtlGetFullPathName_UEx [0x77118AFF+1215]\n\tRtlGetFullPathName_UEx [0x77118ACD+1165]", "trace": "self = <test_demo.TestDemo object at 0x0000016B61391BD0>\nusername = 'standard_user', password = 'secret_sauce'\n\n    @pytest.mark.ui\n    @pytest.mark.parametrize(\"username,password\", [\n        (\"standard_user\", \"secret_sauce\"),\n        (\"standard_user\",\"standard_user\")\n    ]\n                             )\n    def test_login(self, username, password):\n        self.driver.get(\"https://www.saucedemo.com/\")\n        self.lg = DemoPage(self.driver)\n>       self.lg.login(username, password)\n\nTestcases\\demo\\test_demo.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObject\\demo_Page.py:51: in login\n    self.enter_username(username)\npageObject\\demo_Page.py:20: in enter_username\n    self.driver.find_element(By.XPATH, self.username_xpath).send_keys(username)\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B61391810>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76636739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77118AFF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77118ACD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@id='user-name']\"}\nE         (Session info: chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00C36643]\nE       \t(No symbol) [0x00BCBE21]\nE       \t(No symbol) [0x00ACDA9D]\nE       \t(No symbol) [0x00B01342]\nE       \t(No symbol) [0x00B0147B]\nE       \t(No symbol) [0x00B38DC2]\nE       \t(No symbol) [0x00B1FDC4]\nE       \t(No symbol) [0x00B36B09]\nE       \t(No symbol) [0x00B1FB76]\nE       \t(No symbol) [0x00AF49C1]\nE       \t(No symbol) [0x00AF5E5D]\nE       \tGetHandleVerifier [0x00EAA142+2497106]\nE       \tGetHandleVerifier [0x00ED85D3+2686691]\nE       \tGetHandleVerifier [0x00EDBB9C+2700460]\nE       \tGetHandleVerifier [0x00CE3B10+635936]\nE       \t(No symbol) [0x00BD4A1F]\nE       \t(No symbol) [0x00BDA418]\nE       \t(No symbol) [0x00BDA505]\nE       \t(No symbol) [0x00BE508B]\nE       \tBaseThreadInitThunk [0x76636739+25]\nE       \tRtlGetFullPathName_UEx [0x77118AFF+1215]\nE       \tRtlGetFullPathName_UEx [0x77118ACD+1165]\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException"}, "attachments": [{"name": "log", "source": "76ea2611-3d53-4458-9ff0-3b6efdc7a8e6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup", "value": "'chrome'"}, {"name": "username", "value": "'standard_user'"}, {"name": "password", "value": "'secret_sauce'"}], "start": 1675794971645, "stop": 1675794983896, "uuid": "058a569d-1833-427c-a7f0-a24c8369956e", "historyId": "1479129c9d4a592ea5576d816d577d1d", "testCaseId": "4c390f396dbd91085dd1f908a53ad44d", "fullName": "Testcases.demo.test_demo.TestDemo#test_login", "labels": [{"name": "tag", "value": "ui"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "Testcases.demo"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestDemo"}, {"name": "host", "value": "GS-6528"}, {"name": "thread", "value": "19400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.demo.test_demo"}]}